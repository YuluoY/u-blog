#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import pkg from 'fast-glob';
const { glob } = pkg;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * 生成Vue全局组件类型映射文件
 * 扫描src/components目录下的所有组件index.ts文件
 * 生成类似ucc-ui-components.d.ts的全局声明文件
 */

const SRC_COMPONENTS_DIR = path.join(__dirname, '../src/components');
const OUTPUT_FILE = path.join(__dirname, '../dist/u-blog-ui.d.ts');

/**
 * 将组件名转换为PascalCase
 * @param {string} name 组件名
 * @returns {string} PascalCase格式的组件名
 */
function toPascalCase(name) {
  return name
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

/**
 * 扫描组件导出
 * @returns {Object} 包含组件和函数式组件的对象
 */
async function scanComponentExports() {
  const components = [];
  const functionComponents = [];
  
  // 扫描所有组件的index.ts文件
  const indexFiles = await glob('*/index.ts', {
    cwd: SRC_COMPONENTS_DIR,
    absolute: false
  });

  for (const file of indexFiles) {
    const componentDir = path.dirname(file);
    const indexPath = path.join(SRC_COMPONENTS_DIR, file);
    
    try {
      const content = fs.readFileSync(indexPath, 'utf8');
      
      // 查找所有export const U开头的组件（排除以Fn结尾的函数式组件）
      const componentMatches = content.match(/export const (U[A-Z][a-zA-Z0-9]*)/g);
      if (componentMatches) {
        for (const match of componentMatches) {
          const componentName = match.replace('export const ', '');
          // 排除函数式组件（以Fn结尾）
          if (!componentName.endsWith('Fn')) {
            components.push({
              name: componentName,
              componentDir: componentDir
            });
          }
        }
      }
      
      // 查找所有export const U开头的函数式组件（以Fn结尾）
      const functionMatches = content.match(/export const (U[A-Z][a-zA-Z0-9]*Fn)/g);
      if (functionMatches) {
        for (const match of functionMatches) {
          const functionName = match.replace('export const ', '');
          functionComponents.push({
            name: functionName,
            componentDir: componentDir
          });
        }
      }
    } catch (error) {
      console.warn(`⚠️  无法读取文件 ${indexPath}:`, error.message);
    }
  }

  return {
    components: components.sort((a, b) => a.name.localeCompare(b.name)),
    functionComponents: functionComponents.sort((a, b) => a.name.localeCompare(b.name))
  };
}

/**
 * 生成类型声明文件内容
 * @param {Object} exports 包含组件和函数式组件的对象
 * @returns {string} 生成的文件内容
 */
function generateTypeDeclaration(exports) {
  const { components, functionComponents } = exports;
  
  const header = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by generate-components-dts script
// Auto-generated Vue global components type declarations
export {}

declare module 'vue' {
  export interface GlobalComponents {`;

  const componentDeclarations = components.map(comp => {
    return `    ${comp.name}: typeof import('./types/components')['${comp.name}']`;
  }).join('\n');

  const vueModuleFooter = `  }
}

declare module '@vue/runtime-core' {
  export interface ComponentCustomProperties {`;

  const functionDeclarations = functionComponents.map(func => {
    // 将UDialogFn转换为$dialog，UMessageFn转换为$message等
    const propertyName = func.name.replace('U', '').replace('Fn', '').toLowerCase();
    return `    $${propertyName}: typeof import('./types/components')['${func.name}']`;
  }).join('\n');

  const footer = `  }
}`;

  return [header, componentDeclarations, vueModuleFooter, functionDeclarations, footer].join('\n');
}

/**
 * 主函数
 */
async function main() {
  try {
    console.log('🔍 扫描组件导出...');
    
    // 检查src/components目录是否存在
    if (!fs.existsSync(SRC_COMPONENTS_DIR)) {
      console.error(`❌ 错误: ${SRC_COMPONENTS_DIR} 目录不存在`);
      process.exit(1);
    }

    const exports = await scanComponentExports();
    
    if (exports.components.length === 0) {
      console.warn('⚠️  警告: 未找到任何组件导出');
      return;
    }

    console.log(`📦 找到 ${exports.components.length} 个组件:`);
    exports.components.forEach(comp => {
      console.log(`   - ${comp.name}`);
    });

    if (exports.functionComponents.length > 0) {
      console.log(`🔧 找到 ${exports.functionComponents.length} 个函数式组件:`);
      exports.functionComponents.forEach(func => {
        console.log(`   - ${func.name}`);
      });
    }

    const content = generateTypeDeclaration(exports);
    
    // 确保输出目录存在
    const outputDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // 写入文件
    fs.writeFileSync(OUTPUT_FILE, content, 'utf8');
    
    console.log(`✅ 成功生成组件类型声明文件: ${OUTPUT_FILE}`);
    console.log(`📄 文件大小: ${(content.length / 1024).toFixed(2)} KB`);
    
  } catch (error) {
    console.error('❌ 生成组件类型声明文件时出错:', error.message);
    process.exit(1);
  }
}

// 如果直接运行此脚本
if (process.argv[1] && process.argv[1].endsWith('generate-components-dts.js')) {
  main().catch(console.error);
}

export {
  scanComponentExports,
  generateTypeDeclaration,
  toPascalCase
};
